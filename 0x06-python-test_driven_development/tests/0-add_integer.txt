================================================================================

Test file for "add_integer" function from 0-add_integer.py
     - only accepts 2 variables
     - accepts floats and ints
       but float must be casted to INT before adding
If function fails return "a/b must be an integer" otherwise
return the sum of a and b.

================================================================================

	>>> add_integer = __import__('0-add_integer').add_integer

Accepted Cases:

	 >>> add_integer(2, 4)
	 6

	 >>> add_integer(-3, 4)
	 1

	 >>> add_integer(4, -8)
	 -4

	 >>> add_integer(-4, -3)
	 -7

	 >>> add_integer(3.01, 5.05)
	 8

	 >>> add_integer(-2.01, 4.01)
	 2

	 >>> add_integer(4.75, -8.99)
	 -4

	 >>> add_integer(-10.99, 1.34)
	 -9

Unacceptable Cases:

	 >>> add_integer("string", 0)
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer

	 >>> add_integer(0, "string")
	 Traceback (most recent call last):
	 ...
	 TypeError: b must be an integer

	 >>> add_integer("string", "me")
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer

	 >>> add_integer({1, 2, 3}, 0)
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer

	 >>> add_integer(0, {1, 2, 3})
	 Traceback (most recent call last):
	 ...
	 TypeError: b must be an integer

	 >>> add_integer({1, 2, 3}, {3, 2, 1})
	 Traceback (most recent call last):
	 TypeError: a must be an integer

	 >>> add_integer([1, 2, 3], 0)
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer

	 >>> add_integer(0, [1, 2, 3])
	 Traceback (most recent call last):
	 ...
	 TypeError: b must be an integer

	 >>> add_integer([1, 2, 3], [-3, -2, 4])
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer

	 >>> add_integer({1: 3}, 0)
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer

	 >>> add_integer(0, {1: 3})
	 Traceback (most recent call last):
	 ...
	 TypeError: b must be an integer

	 >>> add_integer({1: 3}, {3: 6})
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer

	 >>> add_integer(None, 0)
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer

	 >>> add_integer(0, None)
	 Traceback (most recent call last):
	 ...
	 TypeError: b must be an integer

	 >>> add_integer(None, None)
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer

	 >>> add_integer(True, 0)
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer

	 >>> add_integer(0, True)
	 Traceback (most recent call last):
	 ...
	 TypeError: b must be an integer

	 >>> add_integer(False, 0)
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer

	 >>> add_intger(0, False)
	 Traceback (most recent call last):
	 ...
	 TypeError: b must be an integer

	 >>> add_integer(True, False)
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer

	 >>> add_integer(float("inf"), 0)
	 Traceback (most recent call last):
	 ...
	 OverflowError: cannot convert float infinity into integer

	 >>> add_integer(0, float("inf"))
	 Traceback (most recent call last):
	 ...
	 OverflowError: cannot convert float infinity into integer

	 >>> add_integer(float("inf"), float("inf"))
	 Traceback (most recent call last):
	 ...
	 OverflowError: cannot convert float infinity into integer

	 >>> add_integer( )
	 Traceback (most recent call last):
	 ...
	 TypeError: add_integer() missing 2 required positional arguments: 'a' and 'b'

	 >>> add_integer( , 1)
	 Traceback (most recent call last):
	 ...
	 SyntaxError: invalid syntax

	 >>> add_integer(1, )
	 Traceback (most recent call last):
	 ...
	 TypeError: add_integer() missing 1 required positional argument: 'b'
